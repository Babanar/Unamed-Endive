Documentation of the built-in methods of the module Unamed

Please do not delete the script 'register.py'. If you need to add a script to the game, just follow the documentation : https://github.com/Loodoor/Unamed-Endive/wiki/Scripting

Also, if you need to import files, use the lambda include, and not import (changing the current working directory via os.chdir will also change the cwd for the game and so it won't be able to load its resources !)

When you receive an event in the python scripting, it is a dict

To check the code of a key event, you can do ev['key'] == keys_ev_code.index('A') (will check if it is the key A)

changeBlockAttribute
--------------------
To change attributes of a specified block on the current map

countCreaturesInEquip
---------------------
Return how many creatures has the player in his/her equip

countCreaturesInPC
------------------
Return how many creatures has the player in his/her PC

createGlobal
------------
Create a global value from a given id (of type char*), with a specified value (int, float and char* are currently supported)

createPNJ
---------
Create a PNJ (refer to the wiki to learn more about the PNJkind)

createText
----------
Create a text at (x, y) of a number of characters/lines given, with the text of a font size, and a color given, the whole thing having a string id given

displayImage
------------
Display an image loaded before using loadImage with its id, and its position (2 integers, x and y)

displayWithView
---------------
Display an image loaded before, relative to the top left corner of the view. Need the same argument as displayImage(...)

getCurrentMusicName
-------------------
Return the name of the current playing music, if one is playing

getCurrentViewId
----------------
Return the current view id

getEvent
--------
Get the current event and return it using a dict

getGlobal
---------
Return a global value with the name given

getMapHeight
------------
Return the height of the map (in blocks)

getMapId
--------
Return the id of the map (int)

getMapIdFromTpPos
-----------------
Return a map id from a tp pos. If the tp can not be found, return -1

getMapWidth
-----------
Return the width of the map (in blocks)

getPlayerName
-------------
Return the name of the player

giveObject
----------
Give an object to the player. Need the id of the object, the quantity to give, and in which pocket (id) it will be put

hasActiveHud
------------
Check if a view, with a given id, has currently an active HUD

isTp
----
Return 1 if the block at the pos x y is a tp, otherwise 0

loadImage
---------
Load an image using a given path, and assigne it to a given id

playMusic
---------
Start a song from its name

registerScript
--------------
Register a script in the PyScripting singleton, as a specific kind given as an argument, with a string id also given

screenshot
----------
Take a screenshot and save it to screenshots/. Return the name of the file

setCurrentView
--------------
Set the current view. Take the id of the new view

setFightEnv
-----------
Set the environment for a fight

setFightEscape
--------------
Set the fight escape mode

stopMusic
---------
Stop the current, if one is playing

tpPlayerOn
----------
Take two integers (x, y). Will teleport the player on this position, on the current map

turnPlayer
----------
Turn the player in the specified direction. 0: up, 1: down, 2: left, 3: right

upr
---
Print function using std::cout

writeText
---------
Write a text, giving the id of a created text