Documentation of the built-in methods of the module Unamed

Please do not delete the script 'register.py'. If you need to add a script to the game, just follow the documentation : https://github.com/Loodoor/Unamed-Endive/wiki/Scripting

Also, if you need to import files, use the lambda include, and not import (changing the current working directory via os.chdir will also change the cwd for the game and so it won't be able to load its resources !)

When you receive an event in the python scripting, it is a dict

To check the code of a key event, you can do ev['key'] == keys_ev_code.index('A') (will check if it is the key A)

addTrigger
----------
Take two integers (mid and rid) and a string representing the id of your new trigger

changeBlockAttribute
--------------------
To change attributes of a specified block on the current map

createGlobal
------------
Create a global value from a given id (of type char*), with a specified value (int, float and char* are currently supported)

createPNJ
---------
Create a PNJ (refer to the wiki to learn more about the PNJkind)

displayImage
------------
Display an image loaded before using loadImage with its id, and its position (2 integers, x and y)

displayWithView
---------------
Display an image loaded before, relative to the top left corner of the view. Need the same argument as displayImage(...)

getCurrentMusicName
-------------------
Return the name of the current playing music, if one is playing

getCurrentViewId
----------------
Return the current view id

getEvent
--------
Get the current event and return it using a dict

getGlobal
---------
Return a global value with the name given

getMapHeight
------------
Return the height of the map (in blocks)

getMapId
--------
Return the id of the map (int)

getMapIdFromTpPos
-----------------
Return a map id from a tp pos. If the tp can not be found, return -1

getMapWidth
-----------
Return the width of the map (in blocks)

getPlayerName
-------------
Return the name of the player

getTrigger
----------
Take two integers, mid and rid, and return a string representing the identifier of a trigger. Remember to check if the trigger is valid using is_notrigger(id)

hasActiveHud
------------
Check if a view, with a given id, has currently an active HUD

isTp
----
Return 1 if the block at the pos x y is a tp, otherwise 0

is_notrigger
------------
Take a string, given by getTrigger(..), and return True or False whether the id represents a valid trigger or not

loadImage
---------
Load an image using a given path, and assigne it to a given id

playMusic
---------
Start a song from its name

registerScript
--------------
Register a script in the PyScripting singleton, as a specific kind given as an argument, with an id also given

screenshot
----------
Take a screenshot and save it to screenshots/. Return the name of the file

stopMusic
---------
Stop the current, if one is playing

tpPlayerOn
----------
Take two integers (x, y). Will teleport the player on this position, on the current map

tpPlayerOnSpawn
---------------
Take a map id and a spawn id (integer and string). Will teleport the player to this map (can be the actual map), on the position of the spawn

upr
---
Print function using std::cout